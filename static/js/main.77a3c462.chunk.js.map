{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","data","item","weather","temperature","icon","pressure","speed","placeName","apiToken","id","getJSON","uri","options","window","fetch","then","res","json","description","main","temp","wind","method","params","this","setState","event","index","target","dataset","optionIndex","place","getData","name","console","log","className","Card","class","CardHeader","title","CardActions","handleUpdate","bind","CardContent","React","Component","SelectorView","Autocomplete","getOptionLabel","option","renderInput","TextField","label","variant","style","width","fullWidth","onChange","ListView","formatTemperature","formatPressure","formatSpeed","path","image","Avatar","src","alt","WbSunny","List","ListItem","ListItemIcon","ListItemText","primary","ShowChart","Explore","FastRewind","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77a3c462.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  List,\n  ListItem,\n  ListItemText,\n  TextField,\n  Avatar,\n  ListItemIcon\n} from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport { ShowChart, WbSunny, Explore, FastRewind } from '@material-ui/icons'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      data: {},\n      item: {\n        weather: '',\n        temperature: '',\n        icon: '',\n        pressure: '',\n        speed: ''\n      },\n      placeName: ''\n    }\n    this.apiToken = '586fff59618d6d3e1be423e10c6f0ae6'\n  }\n\n  async getData (id) {\n    const getJSON = (uri, options) =>\n      window\n        .fetch(uri, options)\n        .then(res => res.json())\n        .then(json => ({\n          weather: json.weather[0].description,\n          icon: json.weather[0].icon,\n          temperature: json.main.temp,\n          pressure: json.main.pressure,\n          speed: json.wind.speed\n        }))\n\n    const options = { method: 'get' }\n    const uri =\n      'https://api.openweathermap.org/data/2.5/weather?lang=ja&units=metric'\n    const params = `&appid=${this.apiToken}&id=${id}`\n    const data = await getJSON(uri + params, options)\n    this.setState({ item: data })\n  }\n\n  handleUpdate (event) {\n    const index = event.target.dataset.optionIndex\n    const place = this.state.data[index]\n    this.getData(place.id)\n    this.setState({ placeName: place.name })\n  }\n\n  componentDidMount () {\n    this.setState({\n      data: [\n        { name: '岡山県 岡山市', id: 1858311 },\n        { name: '鳥取県 鳥取市', id: 1849892 },\n        { name: '広島県 広島市', id: 1862413 },\n        { name: '島根県 松江市', id: 1861084 },\n        { name: '山口県 山口市', id: 1863418 },\n        { name: '徳島県 徳島市', id: 1858902 },\n        { name: '香川県 高松市', id: 1857665 },\n        { name: '愛媛県 松山市', id: 1926099 },\n        { name: '高知県 高知市', id: 1859146 },\n        { name: '福岡県 福岡市', id: 1859307 },\n        { name: '大分県 大分市', id: 1864750 },\n        { name: '宮崎県 宮城市', id: 1856710 },\n        { name: '佐賀県 佐賀市', id: 1853303 },\n        { name: '熊本県 熊本市', id: 1858419 },\n        { name: '長崎県 長崎市', id: 1856156 },\n        { name: '鹿児島県 鹿児島市', id: 1860825 },\n        { name: '沖縄県 那覇市', id: 1894616 }\n      ]\n    })\n  }\n\n  render () {\n    console.log(this.state)\n    return (\n      <div className='App'>\n        <Card>\n          <div class='midashi'>\n            <CardHeader title='中国・四国・九州地方の天気情報' />\n          </div>\n          <CardActions>\n            <SelectorView\n              data={this.state.data}\n              handleUpdate={this.handleUpdate.bind(this)}\n            />\n          </CardActions>\n          <CardContent>\n            <ListView item={this.state.item} />\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst SelectorView = props => (\n  <Autocomplete\n    options={props.data}\n    getOptionLabel={option => option.name}\n    renderInput={params => (\n      <TextField\n        {...params}\n        label='地域を選ぶ'\n        variant='outlined'\n        style={{ width: 500 }}\n        fullWidth\n      />\n    )}\n    onChange={props.handleUpdate}\n  />\n)\nconst ListView = props => {\n  const { weather, icon, temperature, pressure, speed } = props.item\n  const formatTemperature = temperature ? `気温 ${temperature}℃` : ''\n  const formatPressure = pressure ? `気圧 ${pressure}Pa` : ''\n  const formatSpeed = speed ? `風速 ${speed}m/s` : ''\n  const path = `http://openweathermap.org/img/wn/${icon}.png`\n  const image = icon ? <Avatar src={path} alt={weather} /> : <WbSunny />\n  console.log('props', props)\n  return (\n    <List>\n      <ListItem>\n        <ListItemIcon>{image}</ListItemIcon>\n        <ListItemText primary={weather} />\n      </ListItem>\n\n      <ListItem>\n        <ListItemIcon>\n          <ShowChart />\n        </ListItemIcon>\n        <ListItemText primary={formatTemperature} />\n      </ListItem>\n\n      <ListItem>\n        <ListItemIcon>\n          <Explore />\n        </ListItemIcon>\n        <ListItemText primary={formatPressure} />\n      </ListItem>\n\n      <ListItem>\n        <ListItemIcon>\n          <FastRewind />\n        </ListItemIcon>\n        <ListItemText primary={formatSpeed} />\n      </ListItem>\n    </List>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}